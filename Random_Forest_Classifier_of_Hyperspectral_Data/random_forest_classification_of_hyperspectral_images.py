# -*- coding: utf-8 -*-
"""Random_Forest_Classification_of_Hyperspectral_Images.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14uMGghbVYWFDfkEnrKjCzyBDvHewG5zo
"""

import tkinter as tk
from tkinter import *
from tkinter import ttk
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

from sklearn.metrics import accuracy_score,r2_score
from sklearn.impute import SimpleImputer
from tkinter.filedialog import askopenfilename
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report

from scipy.io import loadmat
from tkinter import filedialog
from tkinter import messagebox
from sklearn.decomposition import PCA
from sklearn.ensemble import RandomForestClassifier

# def extract_pixels(X, y):
#   q = X.reshape(-1, X.shape[2])
#   df = pd.DataFrame(data = q)
#   df = pd.concat([df, pd.DataFrame(data = y.ravel())], axis=1)
#   df.columns= [f'band{i}' for i in range(1, 1+X.shape[2])]+['class']
#   df.to_csv('Dataset.csv')
#   return df

root = Tk()
root.title('Random Forest Classifier')
root.geometry('800x800')

def data():
    global x 
    x = askopenfilename(initialdir=r'C:\Users\Lenovo\Desktop\MP PROJECT',title = "Select file")
    x = loadmat(x)['indian_pines_corrected']
    e1.insert(0, x)
    e1.config(text=x)
    
    return x

def ground_truth():
    global y1 
    y1 = askopenfilename(initialdir=r'C:\Users\Lenovo\Desktop\MP PROJECT',title = "Select file")
    y1 = loadmat(y1)['indian_pines_gt']
    e2.insert(0, y1)
    e2.config(text=y1)
    return y1

def load_dataset():
    global df
#     x1 = loadmat(x)['indian_pines_corrected']
#     y1 = loadmat(y)['indian_pines_gt']
    Label(root,text=f'shape:{x.shape}', activeforeground="white",activebackground="black").place(x=500,y=15)
    Label(root,text=f'shape:{y1.shape}', activeforeground="white",activebackground="black").place(x=500,y=35)
    q = x.reshape(-1,x.shape[2])
    df = pd.DataFrame(q)
    df=pd.concat([df,pd.DataFrame(data=y1.ravel())],axis=1)
    df.columns= [f'band{i}' for i in range(1, 1+x.shape[2])]+['class']
    Label(root,text=f'shape:{df.shape}', activeforeground="white",activebackground="black").place(x=500,y=55)
    return df

def save_dataset():
    global dataset
    df.to_csv('Dataset.csv')
    tk.messagebox.showinfo('information',"Dataset saved successfully")

def model():
    global model , q1 , score
    pca = PCA(n_components=85)
    pc = pca.fit_transform(df.iloc[:,:-1].values)
    pca = PCA(n_components = 40)
    dt = pca.fit_transform(df.iloc[:, :-1].values)
    q1 = pd.concat([pd.DataFrame(data = dt), pd.DataFrame(data = y1.ravel())], axis = 1)
    q1.columns = [f'PC-{i}' for i in range(1,41)]+['class']
    x1 = q1[q1['class'] != 0]

    X = x1.iloc[:, :-1].values
    y = x1.loc[:, 'class'].values

     
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=11, stratify=y)
    model = RandomForestClassifier()
    model.fit(X_train,y_train)
    y_pred = model.predict(X_test)
    score  = 100*accuracy_score(y_pred,y_test)
    Label(root,text=f'Accuracy Score : {score}', activeforeground="white",activebackground="black").place(x=500,y=205)

# button_explore1 = Button(root,
#         text = "Browse Files",
#                         command = data)

# button_explore2 = Button(root,
#         text = "Browse Files",
#                         command = ground_truth)

# button_explore1.grid(column = 1, row = 2)
  
# button_explore2.grid(column = 1,row = 3)

l1=Label(root, text='Select Data File')
l1.grid(row=1, column=0)
e1 = Entry(root,text='')
e1.grid(row=1, column=1)
Button(root,text='open', command=data,activeforeground="white",activebackground="black").grid(row=1, column=2)

l2=Label(root, text='Select Ground Truth File')
l2.grid(row=2, column=0)
e2 = Entry(root,text='')
e2.grid(row=2, column=1)
Button(root,text='open', command=ground_truth,activeforeground="white",activebackground="black").grid(row=2, column=2)

# l3=Label(root, text='Select Ground Truth F')
# l2.grid(row=1, column=0)
# e2 = Entry(root,text='')
# # e2.grid(row=1, column=1)
Button(root,text='Load Dataset', command=load_dataset,activeforeground="white",activebackground="black").grid(row=4, column=2)

Button(root,text='Save Dataset', command=save_dataset,activeforeground="white",activebackground="black").grid(row=6, column=2)

Button(root,text='Train model', command=model,activeforeground="white",activebackground="black").grid(row=8, column=2)

l4 = Label(root,text='Random Forest Classifier for Hyperspectral Images')
l4.grid(row=0,column = 2)

l3 = Label(root,text=' ')
l3.grid(row=5,column = 2)

l5 = Label(root,text='  ')
l5.grid(row=7,column = 2)

l7 = Label(root,text='  ')
l7.grid(row=3,column = 2)

root.mainloop()



